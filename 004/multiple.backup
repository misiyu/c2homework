#include <stdio.h>
#define MAX 5000

/*int remaind[MAX];*/
char remaindMark[MAX];
int remaindLen =0;
int validNum[10][MAX];
int validLen=0;
int validDeep[10];
int N=0;
struct Node{
	int remaindValue;
	int len ;
	char path[500];
}remaind[MAX];

void builtValidNum(int n)
{

	int col=0;
	for (col = 0; col < validLen; col++) {
		int row=0;
		while(1)
		{
			validNum[row+1][col] = validNum[row][col]*10 %n;
			row++;
			/*prrowntf("%d\n",validNum[row][col]);*/
			int k=0;
			int mark =0;
			for(k=1;k< row;k++)
				if(validNum[row][col] == validNum[k][col])
				{
					mark =1;
					break;
				}
			if(mark == 1)
			{
				validNum[row][col]=-1;
				validDeep[col] = row-1;
				break;
			}
		}
	}
}

void init()
{
	FILE *fp=fopen("multiple.in","r");
	int n=0;
	int validTemp=0;
	int i=0;
	int temp[10];
	for (i = 0; i < 10; i++) {
		temp[i] = 0;
	}
	for (i = 0; i < MAX; i++) {
		remaindMark[i]='0';
		remaind[i].len=0;
	}
	fscanf(fp,"%d",&n);
	N=n;
	while(fscanf(fp,"%d",&validTemp)!=EOF)
		temp[validTemp]=1;
	fclose(fp);
	for (i = 0; i < 10; i++) {
		if(temp[i]!=0)
		{
			remaind[remaindLen].remaindValue=i;
			int len=remaind[remaindLen].len;
			remaind[remaindLen].path[len] = i+'0';
			remaind[remaindLen].len++;
			remaindLen++;
			validNum[0][validLen++] = i;
			if(i!=0)
				remaindMark[i]='1';
		}
	}
	builtValidNum(n);
}

void bfsFinder()
{
	int deepest=0;
	int deep=0;
	int i=0;
	int count=0;
	short int unsigned mark=0;
	for (i = 0; i < validLen; i++) {
		if(validDeep[i]>deepest)
			deepest = validDeep[i];
	}
	int start=0;
	while(1)
	{
		deep ++;
		count = (count+1)%deepest;
		int col=0;
		if((mark == 0 && count ==0)|| mark==2)
			break;
		mark =0;
		int len = remaindLen;
		for (col = 0; col < validLen; col++) {
            if(mark ==2)
                break;
			if(validNum[0][col] == 0)
				continue;
			i=start;
			int temp2 = deep > validDeep[col]?deep % validDeep[col]:deep;
			int adder = validNum[temp2][col];
			for (; i < len; i++) {
				int newRemaind = (remaind[i].remaindValue + adder)%N;
				/*if(remaindMark[newRemaind]=='0' )*/
				{
					remaindMark[newRemaind] = '1';
					remaind[remaindLen] = remaind[i];
					remaind[remaindLen].remaindValue = newRemaind;
					int lentemp1 = remaind[remaindLen].len;
					remaind[remaindLen].path[lentemp1]=validNum[0][col]+'0';
					remaind[remaindLen].len++;
					remaindLen++;
					mark =1;
					if(newRemaind==0)
                    {
                        mark=2;
                        break;
                    }
				}
			}
		}
		start = len;
	}
	FILE *fp=fopen("multiple.out","w");
	if(mark==0)
	{
		fprintf(fp,"0\n");
		printf("0\n");
	}
	else if (mark==2) {
		/*printf("%s\n",remaind[remaindLen-1].path);*/
		int len=remaind[remaindLen-1].len;
		for(i=len-1;i>=0;i--)
		{
			printf("%c",remaind[remaindLen-1].path[i]);
			fprintf(fp,"%c",remaind[remaindLen-1].path[i]);
		}
		printf("\n");
		fprintf(fp,"\n");
	}
}

int main() {
	init();
	int i=0;
	int j=0;
	for (j = 0; j < validLen; j++) {
		for(i = 0; validNum[i][j]!=-1;i++)
			printf("%d ",validNum[i][j]);
		printf("\n");
	}
	bfsFinder();
	return 0;
}
